
interfacing_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001c8  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000010e  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001a7  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001a4  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000007c  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	3c c0       	rjmp	.+120    	; 0x114 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

int main(void)
{
	// LEDs enable PF1 (AH), LEDs -> PORTA
	//GPIOF->DDR |= (1<<1);
	SET_BIT(GPIOF->DDR,1);
  9e:	e1 e6       	ldi	r30, 0x61	; 97
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	80 83       	st	Z, r24
	//GPIOF->PORT |= (1<<1);
	SET_BIT(GPIOF->PORT,1);
  a8:	e2 e6       	ldi	r30, 0x62	; 98
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
	
	//GPIOA->DDR |= 0xFF;
	SET_BYTE(GPIOA->DDR);
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8a bb       	out	0x1a, r24	; 26
	
	int index = 0;
	
    while(1)
    {
		for(index = 0; index <= 7; index++)
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	a0 e0       	ldi	r26, 0x00	; 0
		{
			(index == 4)? 0:_delay_ms(50);
			GPIOA->PORT = ((1 << index) | (1 << (7 - index)));
  be:	e7 e0       	ldi	r30, 0x07	; 7
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	20 c0       	rjmp	.+64     	; 0x108 <main+0x6a>
	
    while(1)
    {
		for(index = 0; index <= 7; index++)
		{
			(index == 4)? 0:_delay_ms(50);
  c8:	84 30       	cpi	r24, 0x04	; 4
  ca:	91 05       	cpc	r25, r1
  cc:	49 f0       	breq	.+18     	; 0xe0 <main+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	4f e7       	ldi	r20, 0x7F	; 127
  d0:	58 e3       	ldi	r21, 0x38	; 56
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	41 50       	subi	r20, 0x01	; 1
  d6:	50 40       	sbci	r21, 0x00	; 0
  d8:	60 40       	sbci	r22, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x36>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x40>
  de:	00 00       	nop
			GPIOA->PORT = ((1 << index) | (1 << (7 - index)));
  e0:	bf 01       	movw	r22, r30
  e2:	68 1b       	sub	r22, r24
  e4:	79 0b       	sbc	r23, r25
  e6:	a9 01       	movw	r20, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <main+0x50>
  ea:	44 0f       	add	r20, r20
  ec:	55 1f       	adc	r21, r21
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <main+0x4c>
  f2:	ba 01       	movw	r22, r20
  f4:	a9 01       	movw	r20, r18
  f6:	08 2e       	mov	r0, r24
  f8:	02 c0       	rjmp	.+4      	; 0xfe <main+0x60>
  fa:	44 0f       	add	r20, r20
  fc:	55 1f       	adc	r21, r21
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <main+0x5c>
 102:	46 2b       	or	r20, r22
 104:	4b bb       	out	0x1b, r20	; 27
	
	int index = 0;
	
    while(1)
    {
		for(index = 0; index <= 7; index++)
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	88 30       	cpi	r24, 0x08	; 8
 10a:	91 05       	cpc	r25, r1
 10c:	ec f2       	brlt	.-70     	; 0xc8 <main+0x2a>
 10e:	8b 2f       	mov	r24, r27
 110:	9a 2f       	mov	r25, r26
 112:	dd cf       	rjmp	.-70     	; 0xce <main+0x30>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
