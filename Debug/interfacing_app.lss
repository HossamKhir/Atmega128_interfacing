
interfacing_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000142  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001c8  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000010e  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001cc  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001a4  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c9  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000919  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	51 c0       	rjmp	.+162    	; 0x13e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

int main(void)
{
	// LEDs enable PF1 (AH), LEDs -> PORTA
	//GPIOF->DDR |= (1<<1);
	SET_BIT(GPIOF->DDR,1);
  9e:	e1 e6       	ldi	r30, 0x61	; 97
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	80 83       	st	Z, r24
	//GPIOF->PORT |= (1<<1);
	SET_BIT(GPIOF->PORT,1);
  a8:	e2 e6       	ldi	r30, 0x62	; 98
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
	
	//GPIOA->DDR |= 0xFF;
	SET_BYTE(GPIOA->DDR);
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8a bb       	out	0x1a, r24	; 26
	//GPIOA->PORT |= 0xFF;
	//SET_BYTE(GPIOA->PORT);
	
	int index = 0;
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
	
    while(1)
    {
        //YOLO:: You Only Live Once
		SET_BIT(GPIOA->PORT,index);
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	70 e0       	ldi	r23, 0x00	; 0
		SET_BIT(GPIOA->PORT,(7-index));
  be:	e7 e0       	ldi	r30, 0x07	; 7
  c0:	f0 e0       	ldi	r31, 0x00	; 0
		
		CLR_BIT(GPIOA->PORT,index);
		CLR_BIT(GPIOA->PORT,(7-index));
		
		// Reset condition: index == 8
		index = (index == 7)? 0 : index + 1;
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <main+0x2e>
  c8:	8c 2f       	mov	r24, r28
  ca:	9b 2f       	mov	r25, r27
	int index = 0;
	
    while(1)
    {
        //YOLO:: You Only Live Once
		SET_BIT(GPIOA->PORT,index);
  cc:	2b b3       	in	r18, 0x1b	; 27
  ce:	ab 01       	movw	r20, r22
  d0:	08 2e       	mov	r0, r24
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <main+0x3a>
  d4:	44 0f       	add	r20, r20
  d6:	55 1f       	adc	r21, r21
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <main+0x36>
  dc:	24 2b       	or	r18, r20
  de:	2b bb       	out	0x1b, r18	; 27
		SET_BIT(GPIOA->PORT,(7-index));
  e0:	ab b3       	in	r26, 0x1b	; 27
  e2:	9f 01       	movw	r18, r30
  e4:	28 1b       	sub	r18, r24
  e6:	39 0b       	sbc	r19, r25
  e8:	8b 01       	movw	r16, r22
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <main+0x52>
  ec:	00 0f       	add	r16, r16
  ee:	11 1f       	adc	r17, r17
  f0:	2a 95       	dec	r18
  f2:	e2 f7       	brpl	.-8      	; 0xec <main+0x4e>
  f4:	98 01       	movw	r18, r16
  f6:	a0 2b       	or	r26, r16
  f8:	ab bb       	out	0x1b, r26	; 27
		
		(index == 4)? index:_delay_ms(50);
  fa:	84 30       	cpi	r24, 0x04	; 4
  fc:	91 05       	cpc	r25, r1
  fe:	b1 f0       	breq	.+44     	; 0x12c <main+0x8e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	1f e7       	ldi	r17, 0x7F	; 127
 102:	a8 e3       	ldi	r26, 0x38	; 56
 104:	d1 e0       	ldi	r29, 0x01	; 1
 106:	11 50       	subi	r17, 0x01	; 1
 108:	a0 40       	sbci	r26, 0x00	; 0
 10a:	d0 40       	sbci	r29, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x68>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x72>
 110:	00 00       	nop
		
		CLR_BIT(GPIOA->PORT,index);
 112:	3b b3       	in	r19, 0x1b	; 27
 114:	40 95       	com	r20
 116:	43 23       	and	r20, r19
 118:	4b bb       	out	0x1b, r20	; 27
		CLR_BIT(GPIOA->PORT,(7-index));
 11a:	3b b3       	in	r19, 0x1b	; 27
 11c:	20 95       	com	r18
 11e:	23 23       	and	r18, r19
 120:	2b bb       	out	0x1b, r18	; 27
		
		// Reset condition: index == 8
		index = (index == 7)? 0 : index + 1;
 122:	87 30       	cpi	r24, 0x07	; 7
 124:	91 05       	cpc	r25, r1
 126:	81 f2       	breq	.-96     	; 0xc8 <main+0x2a>
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	d0 cf       	rjmp	.-96     	; 0xcc <main+0x2e>
		SET_BIT(GPIOA->PORT,index);
		SET_BIT(GPIOA->PORT,(7-index));
		
		(index == 4)? index:_delay_ms(50);
		
		CLR_BIT(GPIOA->PORT,index);
 12c:	3b b3       	in	r19, 0x1b	; 27
 12e:	40 95       	com	r20
 130:	43 23       	and	r20, r19
 132:	4b bb       	out	0x1b, r20	; 27
		CLR_BIT(GPIOA->PORT,(7-index));
 134:	3b b3       	in	r19, 0x1b	; 27
 136:	20 95       	com	r18
 138:	23 23       	and	r18, r19
 13a:	2b bb       	out	0x1b, r18	; 27
 13c:	f5 cf       	rjmp	.-22     	; 0x128 <main+0x8a>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
